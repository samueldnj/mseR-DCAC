#if !defined(_refptsDLL2_)
#  define _refptsDLL2_

class dll_args;
class model_data : public ad_comm{
  dll_data_int nAges;
  dll_data_vector pars;
  ~model_data();
  model_data(int argc,char * argv[],dll_args&);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  dll_param_init_bounded_number FMSY;
  dll_param_number BMSY;
  dll_param_number MSY;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value logY;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[], dll_args& ad_dll);
  virtual void initializationfunction(void){}
};

class dll_args
{
public:
  int *nAges;
  double *pars;
  double *FMSY;
  double *BMSY;
  double *MSY;

 dll_args(int *_nAges,double *_pars,double *_FMSY,double *_BMSY,double *_MSY) :  nAges(_nAges),pars(_pars),FMSY(_FMSY),BMSY(_BMSY),MSY(_MSY){}

};
#endif
