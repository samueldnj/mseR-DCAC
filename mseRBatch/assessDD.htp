#if !defined(_assessDD_)
#  define _assessDD_

class model_data : public ad_comm{
  data_int nT;
  data_int nProjYrs;
  data_int trendYrs;
  data_int rSeed;
  data_int ruleType;
  data_number Linf;
  data_number L1;
  data_number vonK;
  data_number c1;
  data_number c2;
  data_number sigmaL;
  data_int kage;
  data_number alpha_g;
  data_number rho_g;
  data_number wk;
  data_number pmSteepness;
  data_number psdSteepness;
  data_number pmM;
  data_number psdM;
  data_vector katch;
  data_int indexType;
  data_vector Index;
  data_number sigC;
  data_int unfished;
  data_int nQlevels;
  data_vector Qlevel;
  int ft_count;
  int i;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  objective_function_value f;
  param_init_number logit_ySteepness;
  param_init_bounded_number ln_B0;
  param_init_number ln_M;
  param_init_number rho;
  param_init_bounded_vector omega;
  param_init_bounded_vector ln_Ft;
  param_number B0;
  param_number M;
  param_number ySteepness;
  param_number rSteepness;
  param_number rec_a;
  param_number rec_b;
  param_number R0;
  param_number N0;
  param_number tau;
  param_number sigmaR;
  param_number snat;
  param_number wbar;
  param_vector surv;
  param_vector rec;
  param_vector meanwt;
  param_number g;
  param_number kk;
  param_vector numbers;
  param_vector biomass;
  param_vector exploitBiomass;
  param_vector spawnBiomass;
  param_vector Ft;
  param_vector Ct;
  param_vector Ct_resid;
  param_number Ft_resid;
  param_stddev_number termDep;
  param_number projSpawnBio;
  param_number projExpBio;
  param_number kappaSq;
  param_number lnq;
  param_number ss;
  param_vector z;
  param_number zSum;
  param_number validObs;
  param_number pos_pen;
  param_number Z1;
  param_number Z2;
  param_number Ct_like;
  param_number pF;
  param_number muB;
  param_number tauB;
  param_number aB;
  param_number bB;
  param_number steepness_nlp;
  param_number M_nlp;
  param_number neval;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void calcIndexLikelihood(void);
  void calcRecPrior(void);
  void calcMPrior(void);
  void getF(void);
  void popDynamics(void);
  void projDynamics3(void);
  void projDynamics12(void);
  void popInit(void);
  void calcRecPars(void);

};
#endif
