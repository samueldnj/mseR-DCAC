#if !defined(_refptsca_)
#  define _refptsca_

class model_data : public ad_comm{
  init_adstring dataFileName;
  data_int nAges;
  data_number B0;
  data_number R0;
  data_number rSteepness;
  data_number rec_a;
  data_number rec_b;
  data_number M;
  data_number aSel50;
  data_number aSel95;
  data_number lnsigmaR;
  data_number rho;
  data_number aMat50;
  data_number aMat95;
  data_number Linf;
  data_number L1;
  data_number vonK;
  data_number c1;
  data_number c2;
  data_number sigmaL;
  data_number tau;
  data_number spawnBiomass;
  data_number eBio;
  data_number termDep;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number FMSY;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value logY;
  param_number Rstar;
  param_number phiY;
  param_number phiS;
  param_number BMSY;
  param_number MSY;
  param_vector age;
  param_number S;
  param_vector la;
  param_vector ma;
  param_vector sa;
  param_vector wa;
  param_vector len;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void calcYield(void);

};
#endif
