#if !defined(_assessca_)
#  define _assessca_

class model_data : public ad_comm{
  data_int nT;
  data_int nAges;
  data_int nProjYrs;
  data_int trendYrs;
  data_int rSeed;
  data_int ruleType;
  data_number aMat50;
  data_number aMat95;
  data_number Linf;
  data_number L1;
  data_number vonK;
  data_number c1;
  data_number c2;
  data_number sigmaL;
  data_number pmSteepness;
  data_number psdSteepness;
  data_number pmM;
  data_number psdM;
  data_int qChangeTime;
  data_vector pmQ;
  data_vector psdQ;
  data_number sigmaM;
  data_number lowBndLnB0;
  data_number upperBndLnB0;
  data_number fixFSel;
  data_number fixSSel;
  data_number nSamples;
  data_number nSamplesS;
  int phase_aSelStep;
  int phase_aSelStepS;
  data_vector katch;
  data_vector indexType;
  data_vector Index;
  data_matrix obsPropAge;
  dvector obsPa;
  data_matrix obsPropAgeS;
  dvector obsPaS;
  data_int nQlevels;
  data_vector Qlevel;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_init_bounded_vector log_initN_mult;
  param_init_bounded_number logit_ySteepness;
  param_init_bounded_number ln_B0;
  param_init_number ln_M;
  param_init_bounded_number ln_aSel50;
  param_init_bounded_number ln_aSelStep;
  param_init_bounded_number ln_aSelS50;
  param_init_bounded_number ln_aSelSStep;
  param_init_number rho;
  param_init_bounded_vector omega;
  param_init_bounded_vector mDevs;
  param_number B0;
  param_number M;
  param_number ySteepness;
  param_number rSteepness;
  param_number aSel50;
  param_number aSel95;
  param_number aSelS50;
  param_number aSelS95;
  param_number rec_a;
  param_number rec_b;
  param_number phi;
  param_vector tmpPhi;
  param_number R0;
  param_number tau;
  param_number sigmaR;
  param_vector Mt;
  param_vector age;
  param_vector sel;
  param_vector selS;
  param_vector wt;
  param_vector wt2;
  param_vector len;
  param_vector mat;
  param_vector surv;
  param_number g;
  param_number gS;
  param_matrix numbers;
  param_matrix biomass;
  param_vector exploitBiomass;
  param_vector exploitBiomassS;
  param_vector spawnBiomass;
  param_matrix predPropAge;
  param_matrix predPropAgeS;
  param_vector Ft;
  param_vector uAge;
  param_vector catAge;
  param_stddev_number termDep;
  param_number projSpawnBio;
  param_number projExpBio;
  param_number projExpBioS;
  param_number kappaSq;
  param_vector lnq;
  param_number ss;
  param_vector z;
  param_number zSum;
  param_number validObs;
  param_number pos_pen;
  param_number kappa_sq;
  param_vector predPa;
  param_vector predPaS;
  param_number age_nll;
  param_number age_nllS;
  param_number Z1;
  param_number Z2;
  param_number Z3;
  param_number muB;
  param_number tauB;
  param_number aB;
  param_number bB;
  param_number steepness_nlp;
  param_number M_nlp;
  param_number neval;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void calcIndexLikelihood_split(void);
  void calcIndexLikelihood(void);
  void calcAgeLikelihood(void);
  void calcRecPrior(void);
  void calcMPrior(void);
  void calc_Mt(void);
  void popDynamics(void);
  void projDynamics3(void);
  void projDynamics12(void);
  void popInit(void);
  void calcRecPars(void);
  void calcPhi(void);
  void calcLenWeightAge(void);
  void calcSelectivity(void);
  void calcMaturity(void);

};
#endif
